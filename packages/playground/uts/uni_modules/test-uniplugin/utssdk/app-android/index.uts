import Log from 'android.util.Log'
import FrameLayout from 'android.widget.FrameLayout'
import View from 'android.view.View'
import { login } from 'login'
import { IUser } from './interface'
import logo from '../../static/logo.png'
import { ShowToast } from '../interface.uts'

const test = arrayOf(1, 2, 3)

type GetBatteryInfoOptions = {
  success?: (res: UTSJSONObject) => void
  fail?: (res: UTSJSONObject) => void
  complete?: (res: UTSJSONObject) => void
}
export class User implements IUser {
  async login(name: string, pwd: string) {
    setTimeout(() => {
      console.log('timeout')
    }, 1000)
    login(name, pwd)
    for (let i = 0; i < 10; i++) {
      console.log(i)
    }
    Log.info(logo)
    //#ifdef APP-ANDROID
    console.log('def android')
    //#endif
    //#ifdef APP-IOS
    console.log('def ios')
    //#endif
    //#ifndef APP-ANDROID
    console.log('ndef android')
    //#endif
    //#ifndef APP-IOS
    console.log('ndef ios')
    //#endif
    //#ifdef APP-ANDROID || APP-IOS
    console.log('def android || def ios')
    //#endif
    //#ifdef MP-WEIXIN
    console.log('def weixin')
    //#endif
    const a = -3
    console.log(~a)
    new XToast<XToast<unknown>>(getUniActivity())
      .setContentView(R.layout.toast_hint)
      .setDuration(1000)
      .setImageDrawable(android.R.id.icon, R.mipmap.ic_dialog_tip_finish)
      .setText(android.R.id.message, '点我消失')
      .show()
  }
  register(name: string, callback: () => void) {
    Log.info(logo as FrameLayout)
  }
  test(view: View) {
    console.log(new TestClass())
  }
}
function login(name: string, callback: () => void) { }

@Suppress("DEPRECATION")
  export function register(name: string, callback: () => void) { }
export function offMemoryWarning(
  callback: null | ((level: number) => void) = null
) {
  uni.showToast()
  uni.showToast()
  uni.showModel()
}
class TestClass {

}
export const showToast1: ShowToast = (msg) => { }
export const showToast2: ShowToast = function (msg) { }
export const showToast3: ShowToast = function showToast(msg) { }