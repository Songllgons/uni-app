import { UIDevice } from 'UIKit'
import { CLLocationManager, CLAuthorizationStatus } from 'CoreLocation'
import { ShowToast } from '../interface.uts'

type GetBatteryInfoOptions = {
  name: string
  pwd: number
  success?: (res: UTSJSONObject) => void
  fail?: (res: UTSJSONObject) => void
  complete?: (res: UTSJSONObject) => void
}

export default function getBatteryInfo(options: GetBatteryInfoOptions) {
  new UIAlertController(
    (title = title),
    (message = message),
    (preferredStyle = UIAlertController.Style.alert)
  )
  const res = {
    errMsg: 'getBatteryInfo:ok',
    level: UIDevice.current.batteryLevel * 100,
    isCharging: UIDevice.current.batteryState == UIDevice.BatteryState.charging,
  }
  if (options.success != null) {
    options.success!(res)
  }
  if (options.complete != null) {
    options.complete!(res)
  }
}

export function test1(callback: () => void): string {
  console.log({ "a": "b" })
  console.log('test1')
  //#ifdef APP-ANDROID
  console.log('def android')
  //#endif
  //#ifdef APP-IOS
  console.log('def ios')
  //#endif
  //#ifndef APP-ANDROID
  console.log('ndef android')
  //#endif
  //#ifndef APP-IOS
  console.log('ndef ios')
  //#endif
  //#ifdef APP-ANDROID || APP-IOS
  console.log('def android || def ios')
  //#endif
  //#ifdef MP-WEIXIN
  console.log('def weixin')
  //#endif
  console.log(CLLocationManager, CLAuthorizationStatus)
  const a = -3
  console.log(~a)
  return 'test1'
}

class Test1 { }
export class Test {
  constructor() {
    new Test1()
  }
  test(): string | null {
    if (UTSiOS.macros("swift(>=1)")) {
      console.log("swift(>=1)")
    }
    if (UTSiOS.macros("arch(i386) || arch(arm)")) {
      console.log("arch(i386) || arch(arm)")
    }
    if (UTSiOS.available("iOS 14, macOS 11.0, *")) {
      console.log("iOS 14, macOS 11.0, *")
    } else if (UTSiOS.available("iOS 13,*")) {
      console.log("iOS 13,*")
    } else if (UTSiOS.unavailable("tvOS 12")) {
      console.log("tvOS 12")
    }
    return null
  }
}

export async function testAsync() {
  uni.showToast()
  uni.showToast()
  uni.showModel()
  return { a: 1 }
}

export const showToast1: ShowToast = (msg) => { }
export const showToast2: ShowToast = function (msg) { }
export const showToast3: ShowToast = function showToast(msg) { }